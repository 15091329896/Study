<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd">

	<!-- 由 Spring容器创建该类的实例对象 -->
	<bean id="personDao" class="com.spring.impl.PersonDaoImpl" />

	<!-- 配置redis连接池 -->
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<!-- 最大空闲数 -->
		<property name="maxIdle" value="50" />
		<!-- 最大连接数 -->
		<property name="maxTotal" value="100" />
		<!-- 最大等待时间 20s -->
		<property name="maxWaitMillis" value="20000" />
	</bean>

	<!-- 配置一个 JedisConnectionFactory 对象 -->
	<bean id="connectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="localhost" />
		<property name="port" value="6379" />
		<!--<property name="password" value="password"/> -->
		<property name="poolConfig" ref="poolConfig" />
	</bean>

	<!-- 配置 RedisTemplate -->
	<!-- 配置 Spring 关于 Redis 字符串的运行环境 -->
	<bean id="jdkSerializationRedisSerializer"
		class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />

	<bean id="stringRedisSerializer"
		class="org.springframework.data.redis.serializer.StringRedisSerializer" />

	<!-- <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate"> 
		<property name="connectionFactory" ref="connectionFactory" /> <property name="keySerializer" 
		ref="stringRedisSerializer" /> <property name="valueSerializer" ref="jdkSerializationRedisSerializer" 
		/> </bean> -->

	<!-- <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate"> 
		<property name="connectionFactory" ref="connectionFactory" /> <property name="keySerializer" 
		ref="stringRedisSerializer" /> <property name="valueSerializer" ref="stringRedisSerializer" 
		/> </bean> -->

	<!-- 测试hase和链表 -->
	<!-- <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate"> 
		<property name="connectionFactory" ref="connectionFactory" /> <property name="defaultSerializer" 
		ref="stringRedisSerializer" /> <property name="keySerializer" ref="stringRedisSerializer" 
		/> <property name="valueSerializer" ref="jdkSerializationRedisSerializer" 
		/> </bean> -->


	<!-- 测试set -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="defaultSerializer" ref="stringRedisSerializer" />
		<property name="keySerializer" ref="stringRedisSerializer" />
		<property name="valueSerializer" ref="stringRedisSerializer" />
	</bean>

	<!-- 配置redis的发布订阅模式的监听类 -->
	<bean id="redisMsgListener" class="com.redis.listener.RedisMessageListener">
		<property name="redisTemplate" ref="redisTemplate" />
	</bean>


	<!-- 配置监听容器 -->
	<bean id="topicContainer"
		class="org.springframework.data.redis.listener.RedisMessageListenerContainer"
		destroy-method="destroy">
		<!--Redis连接工厂 -->
		<property name="connectionFactory" ref="connectionFactory" />
		<!--连接池，这里只要线程池生存，才能继续监听 -->
		<property name="taskExecutor">
			<bean
				class="org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler">
				<property name="poolSize" value="3" />
			</bean>
		</property>
		<!--消息监听Map -->
		<property name="messageListeners">
			<map>
				<!-- 配置监听者，key-ref和bean id定义一致 -->
				<entry key-ref="redisMsgListener">
					<!--监听类 -->
					<bean class="org.springframework.data.redis.listener.ChannelTopic">
						<constructor-arg value="chat" />
					</bean>
				</entry>
			</map>
		</property>
	</bean>




</beans>